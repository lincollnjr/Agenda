{"name":"Trabalho 0 - Lincoln - Heitor","tagline":"Agenda em ruby implementando mvc e singleton","body":"\r\n\r\n# Linguagem\r\n\r\n\r\n\r\n![logo](http://compsci.ca/blog/wp-content/uploads/2007/04/ruby_logo.gif)\r\n\r\n\r\n## Ruby\r\n* Linguagem tornada púbica em 1995;\r\n* Versão atual 2.1.1 (24/02/14)\r\n* Aplicações: Simulações da Nasa, Toronto Rehab na gestão de telefonia\r\ne helpdesk, Morpha/Siemmens em controladores de robos, ODS atualização\r\n de domínios e Telefonica em 3G, etc\r\n\r\nfonte: ruby-lang.org\r\n\r\n\r\n\r\n## Caracteristicas\r\n\r\n* Orientada a Objeto e flexibilidade (não restrição);\r\n\r\n```\r\n1 - assim como em python a divisão de pacotes não é feita em\r\n pastas e sim arquivos;\r\n2 - o singleton é feito com a importação require singleton;\r\n\r\n```\r\n\r\n# Padrões\r\n\r\n\r\n###MVC\r\n\r\n![Exemplo](http://www.macoratti.net/vbn_mvc4.gif)\r\n\r\n* Divisão em 3 camadas:\r\nM: elementos do dominio e iteração de persistência;\r\nV: Interação com o usuário;\r\nC: controle da regra de negócio;\r\n\r\n```\r\nVantagens:\r\n* Facilita o reaproveitamento de código;\r\n* Facilidade na manutenção e adição de recursos;\r\n* Maior integração da equipe e/ou divisão de tarefas;\r\n* Diversas tecnologias estão adotando essa arquitetura;\r\n* Facilidade em manter o seu código sempre limpo;\r\n\r\n```\r\n\r\n###Singleton\r\n* Padrão de projeto para garantir a existência de uma instância;\r\n\r\n```\r\nrequire 'singleton'\r\n class Foobar\r\n    include Singleton\r\nend\r\n```\r\n\r\n\r\n## Diagrama de Classes\r\n\r\n![Diagrama](http://www.ivnmc.com.br/diagrama.png)\r\n\r\n\r\n### App\r\n```\r\nrequire_relative 'controler'\r\n\r\nclass main\r\n\r\n\t\tcontrole = ControleGeral.new()\r\n\r\n\t\tcontrole.run()\r\n\r\nends\r\n```\r\n### Model\r\n```\r\nrequire \"singleton\"\r\nclass Endereço\r\n\tdef initiliaze(logradouro, numero, bairro, cidade, estado)\r\n\t\t@logradouro = logradouro\r\n\t\t@numero = numero\r\n\t\t@bairro = bairro\r\n\t\t@cidade = cidade\r\n\t\t@estado = estado\r\n\tend\r\n\tdef to_s\r\n\t\t\"Logradouro: #{@logradouro} Numero: #{@numero} Bairro: #{@bairro} Cidade: #{@cidade} Estado: #{@estado} \\n\"\r\n    end\r\nend\r\nclass Usuario\r\n\tdef initiliaze(nome, idade, telefone, endereco)\r\n\t\t@nome = nome\r\n\t\t@idade = idade\r\n\t\t@telefone = telefone\r\n\t\t@endereco = endereco\r\n\tend\r\n\tdef to_s\r\n\t\t\"Nome: #{@nome} Idade: #{@idade} Telefone: #{@telefone} #{@endereco.to_s} \"\r\n\tend\r\nend\r\nclass Agenda\r\n\tinclude Singleton\r\n\t@listContatos = Array.new(50)\r\n\tdef connect\r\n\t\t@connection = Adapter.connect\r\n\tend\r\n\tdef getListContatos()\r\n\t\treturn @listContatos\r\n\tend\r\nend\r\n```\r\n### View\r\n```\r\nclass Visao\r\n\tdef imprimirMenu()\r\n\t\tputs \"          Menu\"\r\n\t\tputs \" 1 - Cadastrar contato\"\r\n\t\tputs \" 2 - Listar os contatos\"\r\n\t\tputs \" 3 - Remover contatos\"\r\n\t\tputs \" 4 - Pesquisar contatos\"\r\n\t\tputs \" 5 - Sair\"\r\n\tend\r\n\tdef imprimirContato(user)\r\n\t\tputs(user)\r\n\tend\r\n\tdef imprimirListaContato(listContatos)\r\n\t\tfor contador in 0 .. 50\r\n\t\t\tputs listContatos[contador]\r\n\t\tend\r\n\tend\r\n\tdef imprimirCadastroNome()\r\n\t\tputs \"O nome do contato: \"\r\n\tend\r\n\tdef imprimirCadastroIdade()\r\n\t\tputs \"A idade do contato: \"\r\n\tend\r\n\tdef imprimirCadastroTelefone()\r\n\t\tputs \"O telefone do contato: \"\r\n\tend\r\n\tdef imprimirCadastroLogradouro()\r\n\t\tputs \"O logradouro do endereco do contato: \"\r\n\tend\r\n\tdef imprimirCadastroNumero()\r\n\t\tputs \"O número do endereco do contato: \"\r\n\tend\r\n\tdef imprimirCadastroBairro()\r\n\t\tputs \"O bairro do endereco do contato: \"\r\n\tend\r\n\tdef imprimirCadastroCidade()\r\n\t\tputs \"A cidade do endereco do contato: \"\r\n\tend\r\n\tdef imprimirCadastroEstado()\r\n\t\tputs \"O Estado do endereco do contato: \"\r\n\tend\r\n\tdef imprimirDeletecontato()\r\n\t\tputs \"O nome do contato a ser removido: \"\r\n\tend\r\n\tdef imprimirPesquisarContato()\r\n\t\tputs \"O nome do contato a ser pesquisado: \"\r\n\tend\r\n\tdef imprimirContatoRemovido()\r\n\t\tputs \"Contato removido.\"\r\n\tend\r\n\tdef imprimirContatoNaoEncontrado()\r\n\t\tputs \"Contato nao encontrado.\"\r\n\tend\r\n\tdef imprimirSalveSucess()\r\n\t\tputs \"Arquivo salvo com sucesso.\"\r\n\tend\r\nend\r\n\r\nclass ControleVisao\r\n\timpressora = Visao.new()\r\n\tdef capturarCadastroNome()\r\n\t\timpressora.imprimirCadastroNome\r\n\t\tentrada = gets()\r\n\t\treturn entrada\r\n\tend\r\n\tdef capturarCadastroIdade()\r\n\t\timpressora.imprimirCadastroIdade\r\n\t\tentrada = gets()\r\n\t\treturn entrada\r\n\tend\r\n\tdef capturarCadastroTelefone()\r\n\t\timpressora.imprimirCadastroTelefone\r\n\t\tentrada = gets()\r\n\t\treturn entrada\r\n\tend\r\n\tdef capturarCadastroLogradouro()\r\n\t\timpressora.imprimirCadastroLogradouro\r\n\t\tentrada = gets()\r\n\t\treturn entrada\r\n\tend\r\n\tdef capturarCadastroNumero()\r\n\t\timpressora.imprimirCadastroNumero\r\n\t\tentrada = gets()\r\n\t\treturn entrada\r\n\tend\r\n\tdef capturarCadastroBairro()\r\n\t\timpressora.imprimirCadastroBairro\r\n\t\tentrada = gets()\r\n\t\treturn entrada\r\n\tend\r\n\tdef capturarCadastroCidade()\r\n\t\timpressora.imprimirCadastroCidade\r\n\t\tentrada = gets()\r\n\t\treturn entrada\r\n\tend\r\n\tdef capturarCadastroEstado()\r\n\t\timpressora.imprimirCadastroEstado\r\n\t\tentrada = gets()\r\n\t\treturn entrada\r\n\tend\r\nend\r\n```\r\n### Controler\r\n```\r\nrequire_relative 'model.rb'\r\nrequire_relative 'view.rb'\r\n\r\nclass Controle\r\n\t@posição = 0\r\n\tdef adicionarContato(user,listContatos)\r\n\t\tif @posição < 51\r\n\t\t\tlistContatos[@posição](user)\r\n\t\t\t@posição = @posição + 1\r\n\t\tend\r\n\tend\r\n\tdef procuraContato(listContatos, nome)\r\n\t\tfor contador in 0 .. 50\r\n\t\t\tif listContatos[contador].@nome == nome\r\n\t\t\t\treturn listContatos[contador]\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\tdef removeContato(listContatos, nome)\r\n\t\t@usuario = procuraContato(listContatos,nome)\r\n\t\tif @usuario != Nil\r\n\t\t\tlistContatos.delete(@usuario)\r\n\tend \r\nend\r\n\r\nclass ControleGeral\r\n\tcontrole = Controle.new()\r\n\tcapturas = ControleGeral.new()\r\n\tvisao = Visao.new()\r\n\tagenda = Agenda.instance.connect\r\n\tdef run()\r\n\t\tvisao.imprimirMenu()\r\n\t\t@opcao = gets()\r\n\t\twhile(true)\r\n\t\t\tcase @opcao\r\n\t\t\twhen 1\t\t\t\t\r\n\t\t\t\tcontrole.adicionarContato(cadastraContato(),agenda.getListContatos)\r\n\t\t\t\tbreak\r\n\t\t\twhen 2\r\n\t\t\t\tvisao.imprimirListaContatos(agenda.getListContatos)\r\n\t\t\t\tbreak\r\n\t\t\twhen 3\r\n\t\t\t\tcontrole.removeContato(agenda.getListContatos,capturas.capturaCadastroNome())\r\n\t\t\t\tbreak\r\n\t\t\twhen 4\r\n\t\t\t\tcontrole.procuraContato(agenda.getListContatos,capturas.capturaCadastroNome())\r\n\t\t\t\tbreak\r\n\t\t\twhen 5\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\tend\r\n\tend\t\r\n\tdef cadastraContato()\r\n\t\treturn Usuario.new(capturas.capturaCadastroNome(), capturas.capturaCadastroIdade(), capturas.capturaCadastroTelefone(), cadastraEndereco())\r\n\tend\r\n\tdef cadastraEndereco()\r\n\t\treturn Endereco.new(capturas.capturaCadastroLogradouro(), capturas.capturaCadastroNumero(), capturas.capturaCadastroBairro(), capturas.cadastroCidade(), capturas.cadastroEstado())\r\n\tend\r\n end\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}